* Clojure Naming Conventions

=- **foo**= :: Dynamic var.
=- foo!=    :: Fn with side effects, or that should otherwise be used cautiously.
=- foo?=    :: Truthy val or fn that returns truthy val.
=- foo!?=   :: Fn that has side effects (or requires caution) and that returns a truthy val. Note: !?, not ?!.
=- foo$=    :: Fn that's notably expensive to compute (e.g. hits db).
=- foo_=    :: Dereffable val (e.g. atom, volatile, delay, etc.).
=- _=       :: Unnamed val.
=- _foo=    :: Named but unused val.
=- ?foo=    :: Optional val (emphasize that val may be nil).
=- foo*=    :: A variation of `foo` (e.g. `foo*` macro vs `foo` fn).
=- -foo=    :: Public implementation detail or intermediate (e.g. uncoerced) val.
=- >foo=    :: Val \"to foo\" (e.g. >sender, >host), or fn to put/coerce/transform.
=- <foo=    :: Val \"from foo\" (e.g. <sender, <host), or fn to take/coerce/transform.
=- ->foo=   :: Fn to put/coerce/transform.

From: https://github.com/ptaoussanis/encore/blob/master/src/taoensso/encore.cljc#L12
